
baremetal_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000454  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  080005ec  080005ec  000105ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008dc  080008dc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080008dc  080008dc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008dc  080008dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008dc  080008dc  000108dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008e0  080008e0  000108e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080008e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000004  080008e8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080008e8  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000002f9  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000175  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  000204e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000065  00000000  00000000  00020590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000116c  00000000  00000000  000205f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009f1  00000000  00000000  00021761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000049a5  00000000  00000000  00022152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000180  00000000  00000000  00026af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00026c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005d4 	.word	0x080005d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080005d4 	.word	0x080005d4

080001d8 <main>:
volatile const uint32_t rx_length = sizeof(rx_data);
volatile uint8_t i_tx = 0;
volatile uint8_t i_rx = 0;

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// FPU Init
	*CPACR |= (0xf << 20);
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <main+0x24>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <main+0x24>)
 80001e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e6:	6013      	str	r3, [r2, #0]

	led_init();
 80001e8:	f000 f80a 	bl	8000200 <led_init>

	button_init();
 80001ec:	f000 f828 	bl	8000240 <button_init>

	dma1_init();
 80001f0:	f000 f86e 	bl	80002d0 <dma1_init>

	uart2_init();
 80001f4:	f000 f8f8 	bl	80003e8 <uart2_init>

	for(;;)
 80001f8:	e7fe      	b.n	80001f8 <main+0x20>
 80001fa:	bf00      	nop
 80001fc:	e000ed88 	.word	0xe000ed88

08000200 <led_init>:
{
	for(long int i=0; i<(ms*1600); i++);
}

void led_init(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	*RCC_AHB1ENR |= (1 << 2);
 8000204:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <led_init+0x34>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <led_init+0x34>)
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	6013      	str	r3, [r2, #0]

	*GPIOC_MODER |= (1 << 26);
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <led_init+0x38>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <led_init+0x38>)
 8000216:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800021a:	6013      	str	r3, [r2, #0]

	*GPIOC_ODR |= (1 << 13);
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <led_init+0x3c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <led_init+0x3c>)
 8000222:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40023830 	.word	0x40023830
 8000238:	40020800 	.word	0x40020800
 800023c:	40020814 	.word	0x40020814

08000240 <button_init>:

void button_init(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	*RCC_AHB1ENR |= (1 << 1);
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <button_init+0x70>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <button_init+0x70>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6013      	str	r3, [r2, #0]

	*RCC_APB2ENR |= (1 << 14);
 8000250:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <button_init+0x74>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a17      	ldr	r2, [pc, #92]	; (80002b4 <button_init+0x74>)
 8000256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800025a:	6013      	str	r3, [r2, #0]
	*SYSCFG_EXTICR3 |= (1 << 8);
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <button_init+0x78>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <button_init+0x78>)
 8000262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000266:	6013      	str	r3, [r2, #0]

	*EXTI_FTSR |= (1 << 10);
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <button_init+0x7c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a13      	ldr	r2, [pc, #76]	; (80002bc <button_init+0x7c>)
 800026e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000272:	6013      	str	r3, [r2, #0]
	*EXTI_RTSR &= ~(1 << 10);
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <button_init+0x80>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <button_init+0x80>)
 800027a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800027e:	6013      	str	r3, [r2, #0]
	*EXTI_IMR |= (1 << 10);
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <button_init+0x84>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0f      	ldr	r2, [pc, #60]	; (80002c4 <button_init+0x84>)
 8000286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800028a:	6013      	str	r3, [r2, #0]

	*NVIC_IPR10 |= ((3 << 4) << 0);
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <button_init+0x88>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <button_init+0x88>)
 8000292:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000296:	6013      	str	r3, [r2, #0]
	__asm volatile("":::"memory");
	*NVIC_ISER1 |= (1 << 8);
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <button_init+0x8c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <button_init+0x8c>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6013      	str	r3, [r2, #0]
	__asm volatile("":::"memory");
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023830 	.word	0x40023830
 80002b4:	40023844 	.word	0x40023844
 80002b8:	40013810 	.word	0x40013810
 80002bc:	40013c0c 	.word	0x40013c0c
 80002c0:	40013c08 	.word	0x40013c08
 80002c4:	40013c00 	.word	0x40013c00
 80002c8:	e000e428 	.word	0xe000e428
 80002cc:	e000e104 	.word	0xe000e104

080002d0 <dma1_init>:

void dma1_init(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	*RCC_AHB1ENR |= (1 << 21);
 80002d4:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <dma1_init+0xd0>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a31      	ldr	r2, [pc, #196]	; (80003a0 <dma1_init+0xd0>)
 80002da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002de:	6013      	str	r3, [r2, #0]

	*DMA1_S5CR |= ((4 << 25) | (1 << 10) | (1 << 8) | (1 << 4));
 80002e0:	4b30      	ldr	r3, [pc, #192]	; (80003a4 <dma1_init+0xd4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a2f      	ldr	r2, [pc, #188]	; (80003a4 <dma1_init+0xd4>)
 80002e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80002ea:	f443 63a2 	orr.w	r3, r3, #1296	; 0x510
 80002ee:	6013      	str	r3, [r2, #0]
	*DMA1_S5CR &= ~((3 << 13) | (3 << 11));
 80002f0:	4b2c      	ldr	r3, [pc, #176]	; (80003a4 <dma1_init+0xd4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a2b      	ldr	r2, [pc, #172]	; (80003a4 <dma1_init+0xd4>)
 80002f6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80002fa:	6013      	str	r3, [r2, #0]
	*DMA1_S5NDTR = rx_length;
 80002fc:	4a2a      	ldr	r2, [pc, #168]	; (80003a8 <dma1_init+0xd8>)
 80002fe:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <dma1_init+0xdc>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6013      	str	r3, [r2, #0]
	*DMA1_S5PAR = (uint32_t)UART2_DR;
 8000304:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <dma1_init+0xe0>)
 8000306:	4a2b      	ldr	r2, [pc, #172]	; (80003b4 <dma1_init+0xe4>)
 8000308:	601a      	str	r2, [r3, #0]
	*DMA1_S5M0AR = (uint32_t)&rx_data[0];
 800030a:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <dma1_init+0xe8>)
 800030c:	4a2b      	ldr	r2, [pc, #172]	; (80003bc <dma1_init+0xec>)
 800030e:	601a      	str	r2, [r3, #0]
	*DMA1_S5FCR |= ((1 << 2) | (3 << 0));
 8000310:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <dma1_init+0xf0>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a2a      	ldr	r2, [pc, #168]	; (80003c0 <dma1_init+0xf0>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]

	*DMA1_S6CR |= ((4 << 25) | (1 << 10) | (1 << 6) | (1 << 4));
 800031c:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <dma1_init+0xf4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a28      	ldr	r2, [pc, #160]	; (80003c4 <dma1_init+0xf4>)
 8000322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000326:	f443 638a 	orr.w	r3, r3, #1104	; 0x450
 800032a:	6013      	str	r3, [r2, #0]
	*DMA1_S6CR &= ~((3 << 13) | (3 << 11));
 800032c:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <dma1_init+0xf4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a24      	ldr	r2, [pc, #144]	; (80003c4 <dma1_init+0xf4>)
 8000332:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000336:	6013      	str	r3, [r2, #0]
	*DMA1_S6NDTR = tx_length;
 8000338:	4a23      	ldr	r2, [pc, #140]	; (80003c8 <dma1_init+0xf8>)
 800033a:	4b24      	ldr	r3, [pc, #144]	; (80003cc <dma1_init+0xfc>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6013      	str	r3, [r2, #0]
	*DMA1_S6PAR = (uint32_t)UART2_DR;
 8000340:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <dma1_init+0x100>)
 8000342:	4a1c      	ldr	r2, [pc, #112]	; (80003b4 <dma1_init+0xe4>)
 8000344:	601a      	str	r2, [r3, #0]
	*DMA1_S6M0AR = (uint32_t)&tx_data;
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <dma1_init+0x104>)
 8000348:	4a23      	ldr	r2, [pc, #140]	; (80003d8 <dma1_init+0x108>)
 800034a:	601a      	str	r2, [r3, #0]
	*DMA1_S6FCR |= ((1 << 2) | (3 << 0));
 800034c:	4b23      	ldr	r3, [pc, #140]	; (80003dc <dma1_init+0x10c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a22      	ldr	r2, [pc, #136]	; (80003dc <dma1_init+0x10c>)
 8000352:	f043 0307 	orr.w	r3, r3, #7
 8000356:	6013      	str	r3, [r2, #0]

	*DMA1_S5CR |= (1 << 0);
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <dma1_init+0xd4>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <dma1_init+0xd4>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]

	*NVIC_IPR4 |= ((5 << 4) << 0);
 8000364:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <dma1_init+0x110>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <dma1_init+0x110>)
 800036a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800036e:	6013      	str	r3, [r2, #0]
	__asm volatile("":::"memory");
	*NVIC_ISER0 |= (1 << 16);
 8000370:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <dma1_init+0x114>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <dma1_init+0x114>)
 8000376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800037a:	6013      	str	r3, [r2, #0]
	__asm volatile("":::"memory");

	*NVIC_IPR4 |= ((5 << 4) << 8);
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <dma1_init+0x110>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <dma1_init+0x110>)
 8000382:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000386:	6013      	str	r3, [r2, #0]
	__asm volatile("":::"memory");
	*NVIC_ISER0 |= (1 << 17);
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <dma1_init+0x114>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a15      	ldr	r2, [pc, #84]	; (80003e4 <dma1_init+0x114>)
 800038e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000392:	6013      	str	r3, [r2, #0]
	__asm volatile("":::"memory");
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40023830 	.word	0x40023830
 80003a4:	40026088 	.word	0x40026088
 80003a8:	4002608c 	.word	0x4002608c
 80003ac:	20000000 	.word	0x20000000
 80003b0:	40026090 	.word	0x40026090
 80003b4:	40004404 	.word	0x40004404
 80003b8:	40026094 	.word	0x40026094
 80003bc:	20000020 	.word	0x20000020
 80003c0:	4002609c 	.word	0x4002609c
 80003c4:	400260a0 	.word	0x400260a0
 80003c8:	400260a4 	.word	0x400260a4
 80003cc:	080008d8 	.word	0x080008d8
 80003d0:	400260a8 	.word	0x400260a8
 80003d4:	400260ac 	.word	0x400260ac
 80003d8:	080005ec 	.word	0x080005ec
 80003dc:	400260b4 	.word	0x400260b4
 80003e0:	e000e410 	.word	0xe000e410
 80003e4:	e000e100 	.word	0xe000e100

080003e8 <uart2_init>:

void uart2_init(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	*RCC_AHB1ENR |= (1 << 0);
 80003ec:	4b21      	ldr	r3, [pc, #132]	; (8000474 <uart2_init+0x8c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a20      	ldr	r2, [pc, #128]	; (8000474 <uart2_init+0x8c>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]

	*GPIOA_MODER |= (10 << 4);
 80003f8:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <uart2_init+0x90>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a1e      	ldr	r2, [pc, #120]	; (8000478 <uart2_init+0x90>)
 80003fe:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000402:	6013      	str	r3, [r2, #0]
	*GPIOA_OSPEEDR |= (15 << 4);
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <uart2_init+0x94>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a1c      	ldr	r2, [pc, #112]	; (800047c <uart2_init+0x94>)
 800040a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800040e:	6013      	str	r3, [r2, #0]
	*GPIOA_AFRL |= (0x77 << 8);
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <uart2_init+0x98>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1a      	ldr	r2, [pc, #104]	; (8000480 <uart2_init+0x98>)
 8000416:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800041a:	6013      	str	r3, [r2, #0]

	*RCC_APB1ENR |= (1 << 17);
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <uart2_init+0x9c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <uart2_init+0x9c>)
 8000422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000426:	6013      	str	r3, [r2, #0]

	// Baudrate -> 9600 = 0x0683, 115200 = 8B
	*UART2_BRR = 0x8B;
 8000428:	4b17      	ldr	r3, [pc, #92]	; (8000488 <uart2_init+0xa0>)
 800042a:	228b      	movs	r2, #139	; 0x8b
 800042c:	601a      	str	r2, [r3, #0]
	*UART2_SR &= ~(1 << 6);
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <uart2_init+0xa4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a16      	ldr	r2, [pc, #88]	; (800048c <uart2_init+0xa4>)
 8000434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000438:	6013      	str	r3, [r2, #0]
	//	*UART2_CR1 |= ((1 << 6) | (1 << 5));
	*UART2_CR3 |= ((1 << 7) | (1 << 6));
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <uart2_init+0xa8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <uart2_init+0xa8>)
 8000440:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000444:	6013      	str	r3, [r2, #0]

	*UART2_CR1 |= (1 << 13);
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <uart2_init+0xac>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a12      	ldr	r2, [pc, #72]	; (8000494 <uart2_init+0xac>)
 800044c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000450:	6013      	str	r3, [r2, #0]

	*UART2_CR1 |= (1 << 2);
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <uart2_init+0xac>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a0f      	ldr	r2, [pc, #60]	; (8000494 <uart2_init+0xac>)
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	6013      	str	r3, [r2, #0]
	*UART2_CR1 |= (1 << 3);
 800045e:	4b0d      	ldr	r3, [pc, #52]	; (8000494 <uart2_init+0xac>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <uart2_init+0xac>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	6013      	str	r3, [r2, #0]

	//	*NVIC_IPR9 |= ((5 << 4) << 16);
	//	__asm volatile("":::"memory");
	//	*NVIC_ISER1 |= (1 << 6);
	//	__asm volatile("":::"memory");
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40023830 	.word	0x40023830
 8000478:	40020000 	.word	0x40020000
 800047c:	40020008 	.word	0x40020008
 8000480:	40020020 	.word	0x40020020
 8000484:	40023840 	.word	0x40023840
 8000488:	40004408 	.word	0x40004408
 800048c:	40004400 	.word	0x40004400
 8000490:	40004414 	.word	0x40004414
 8000494:	4000440c 	.word	0x4000440c

08000498 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
	//	*UART2_DR = *(&tx_data + i_tx++);
	//	*UART2_CR1 |= (1 << 3);
	//	i_tx %= tx_length;
	//	if((*DMA1_S6CR & 0x01) == 0x00)
	//	*DMA1_S5CR |= (1 << 0);
	*DMA1_S6CR |= (1 << 0);
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <EXTI15_10_IRQHandler+0x28>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <EXTI15_10_IRQHandler+0x28>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	6013      	str	r3, [r2, #0]

	*EXTI_PR |= (1 << 10);
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <EXTI15_10_IRQHandler+0x2c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <EXTI15_10_IRQHandler+0x2c>)
 80004ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004b2:	6013      	str	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	400260a0 	.word	0x400260a0
 80004c4:	40013c14 	.word	0x40013c14

080004c8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	//	{
	//		rx_data[i_rx++] = *UART2_DR;
	//		i_rx %= rx_length;
	//		*GPIOC_ODR ^= (1 << 13);
	//	}
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	*GPIOC_ODR ^= (1 << 13);
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <DMA1_Stream5_IRQHandler+0x28>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a07      	ldr	r2, [pc, #28]	; (8000500 <DMA1_Stream5_IRQHandler+0x28>)
 80004e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80004e6:	6013      	str	r3, [r2, #0]

	*DMA1_HIFCR |= (1 << 11);
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <DMA1_Stream5_IRQHandler+0x2c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <DMA1_Stream5_IRQHandler+0x2c>)
 80004ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40020814 	.word	0x40020814
 8000504:	4002600c 	.word	0x4002600c

08000508 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	*GPIOC_ODR ^= (1 << 13);
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <DMA1_Stream6_IRQHandler+0x28>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <DMA1_Stream6_IRQHandler+0x28>)
 8000512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000516:	6013      	str	r3, [r2, #0]

	*DMA1_HIFCR |= (1 << 21);
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <DMA1_Stream6_IRQHandler+0x2c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a05      	ldr	r2, [pc, #20]	; (8000534 <DMA1_Stream6_IRQHandler+0x2c>)
 800051e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40020814 	.word	0x40020814
 8000534:	4002600c 	.word	0x4002600c

08000538 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800053c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <LoopForever+0x6>)
  ldr r1, =_edata
 8000542:	490d      	ldr	r1, [pc, #52]	; (8000578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <LoopForever+0xe>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000548:	e002      	b.n	8000550 <LoopCopyDataInit>

0800054a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800054c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054e:	3304      	adds	r3, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000554:	d3f9      	bcc.n	800054a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <LoopForever+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800055c:	e001      	b.n	8000562 <LoopFillZerobss>

0800055e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000560:	3204      	adds	r2, #4

08000562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000564:	d3fb      	bcc.n	800055e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000566:	f000 f811 	bl	800058c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fe35 	bl	80001d8 <main>

0800056e <LoopForever>:

LoopForever:
  b LoopForever
 800056e:	e7fe      	b.n	800056e <LoopForever>
  ldr   r0, =_estack
 8000570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800057c:	080008e4 	.word	0x080008e4
  ldr r2, =_sbss
 8000580:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000584:	20000034 	.word	0x20000034

08000588 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC_IRQHandler>
	...

0800058c <__libc_init_array>:
 800058c:	b570      	push	{r4, r5, r6, lr}
 800058e:	4d0d      	ldr	r5, [pc, #52]	; (80005c4 <__libc_init_array+0x38>)
 8000590:	4c0d      	ldr	r4, [pc, #52]	; (80005c8 <__libc_init_array+0x3c>)
 8000592:	1b64      	subs	r4, r4, r5
 8000594:	10a4      	asrs	r4, r4, #2
 8000596:	2600      	movs	r6, #0
 8000598:	42a6      	cmp	r6, r4
 800059a:	d109      	bne.n	80005b0 <__libc_init_array+0x24>
 800059c:	4d0b      	ldr	r5, [pc, #44]	; (80005cc <__libc_init_array+0x40>)
 800059e:	4c0c      	ldr	r4, [pc, #48]	; (80005d0 <__libc_init_array+0x44>)
 80005a0:	f000 f818 	bl	80005d4 <_init>
 80005a4:	1b64      	subs	r4, r4, r5
 80005a6:	10a4      	asrs	r4, r4, #2
 80005a8:	2600      	movs	r6, #0
 80005aa:	42a6      	cmp	r6, r4
 80005ac:	d105      	bne.n	80005ba <__libc_init_array+0x2e>
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b4:	4798      	blx	r3
 80005b6:	3601      	adds	r6, #1
 80005b8:	e7ee      	b.n	8000598 <__libc_init_array+0xc>
 80005ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80005be:	4798      	blx	r3
 80005c0:	3601      	adds	r6, #1
 80005c2:	e7f2      	b.n	80005aa <__libc_init_array+0x1e>
 80005c4:	080008dc 	.word	0x080008dc
 80005c8:	080008dc 	.word	0x080008dc
 80005cc:	080008dc 	.word	0x080008dc
 80005d0:	080008e0 	.word	0x080008e0

080005d4 <_init>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr

080005e0 <_fini>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr
